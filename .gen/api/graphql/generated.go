// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"fmt"
	"io"
	"strconv"
)

type FloatFilter struct {
	Lt  *float64  `json:"lt"`
	Lte *float64  `json:"lte"`
	Gt  *float64  `json:"gt"`
	Gte *float64  `json:"gte"`
	Eq  *float64  `json:"eq"`
	Ne  *float64  `json:"ne"`
	In  []float64 `json:"in"`
	Nin []float64 `json:"nin"`
}

type InstanceType struct {
	Name            string          `json:"name"`
	Price           float64         `json:"price"`
	CPU             float64         `json:"cpu"`
	Memory          float64         `json:"memory"`
	Gpu             float64         `json:"gpu"`
	NetworkCategory NetworkCategory `json:"networkCategory"`
}

type InstanceTypeQueryInput struct {
	Price           *FloatFilter           `json:"price"`
	CPU             *FloatFilter           `json:"cpu"`
	Memory          *FloatFilter           `json:"memory"`
	Gpu             *FloatFilter           `json:"gpu"`
	NetworkCategory *NetworkCategoryFilter `json:"networkCategory"`
}

type IntFilter struct {
	Lt  *int  `json:"lt"`
	Lte *int  `json:"lte"`
	Gt  *int  `json:"gt"`
	Gte *int  `json:"gte"`
	Eq  *int  `json:"eq"`
	Ne  *int  `json:"ne"`
	In  []int `json:"in"`
	Nin []int `json:"nin"`
}

type NetworkCategoryFilter struct {
	Eq  *NetworkCategory  `json:"eq"`
	Ne  *NetworkCategory  `json:"ne"`
	In  []NetworkCategory `json:"in"`
	Nin []NetworkCategory `json:"nin"`
}

type NetworkCategory string

const (
	NetworkCategoryLow      NetworkCategory = "LOW"
	NetworkCategoryModerate NetworkCategory = "MODERATE"
	NetworkCategoryHigh     NetworkCategory = "HIGH"
)

var AllNetworkCategory = []NetworkCategory{
	NetworkCategoryLow,
	NetworkCategoryModerate,
	NetworkCategoryHigh,
}

func (e NetworkCategory) IsValid() bool {
	switch e {
	case NetworkCategoryLow, NetworkCategoryModerate, NetworkCategoryHigh:
		return true
	}
	return false
}

func (e NetworkCategory) String() string {
	return string(e)
}

func (e *NetworkCategory) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NetworkCategory(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NetworkCategory", str)
	}
	return nil
}

func (e NetworkCategory) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
